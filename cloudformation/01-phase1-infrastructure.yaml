AWSTemplateFormatVersion: '2010-09-09'
Description: 'TaskFlow Pro - Phase 1: S3, DynamoDB, and Lambda Functions'

Parameters:
  StudentId:
    Type: String
    Default: '20251806'
    Description: Student ID in format YYYYDDMM
    
  ProjectName:
    Type: String
    Default: 'TaskFlow'
    Description: Project name prefix

Resources:
  # ===== S3 BUCKET FOR WEBSITE =====
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'taskflow-website-${StudentId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Project
          Value: !Ref ProjectName
          
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${WebsiteBucket.Arn}/*'

  # ===== DYNAMODB TABLES =====
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TaskFlow-Tasks
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: taskId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: taskId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  AnalyticsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TaskFlow-Analytics
      AttributeDefinitions:
        - AttributeName: date
          AttributeType: S
        - AttributeName: metric
          AttributeType: S
      KeySchema:
        - AttributeName: date
          KeyType: HASH
        - AttributeName: metric
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ===== LAMBDA FUNCTIONS =====
  TaskHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TaskFlow-TaskHandler
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          # Placeholder - will be updated by deployment script
          import json
          
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': '*',
                      'Access-Control-Allow-Methods': '*'
                  },
                  'body': json.dumps({'message': 'TaskHandler placeholder'})
              }
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable

  AnalyticsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TaskFlow-Analytics
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          # Placeholder - will be updated by deployment script
          import json
          
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': '*',
                      'Access-Control-Allow-Methods': '*'
                  },
                  'body': json.dumps({'message': 'Analytics placeholder'})
              }
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          ANALYTICS_TABLE: !Ref AnalyticsTable

  SQSProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TaskFlow-SQSProcessor
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          # Placeholder - will be updated by deployment script
          import json
          
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'SQSProcessor placeholder'})
              }
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable

  PreSignupValidationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TaskFlow-PreSignupValidation
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          import json
          
          def lambda_handler(event, context):
              # Get user attributes from the event
              user_attributes = event['request']['userAttributes']
              email = user_attributes.get('email', '')
              
              # Check if email is from gmail.com
              if not email.endswith('@gmail.com'):
                  # Reject non-Gmail users
                  raise Exception('Registration is restricted to Gmail users only. Please use a @gmail.com email address.')
              
              # Return the event to continue registration
              return event
      Timeout: 10
      MemorySize: 128

  AutoAssignGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TaskFlow-AutoAssignGroup
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          import json
          import boto3
          
          def lambda_handler(event, context):
              # Get the user pool ID and username from the event
              user_pool_id = event['userPoolId']
              username = event['userName']
              
              # Create Cognito client
              cognito = boto3.client('cognito-idp')
              
              try:
                  # Add user to 'users' group
                  cognito.admin_add_user_to_group(
                      UserPoolId=user_pool_id,
                      Username=username,
                      GroupName='users'
                  )
                  print(f"Successfully added {username} to users group")
              except Exception as e:
                  print(f"Error adding user to group: {str(e)}")
                  # Don't fail the trigger
              
              # Return the event to continue
              return event
      Timeout: 10
      MemorySize: 128

Outputs:
  WebsiteURL:
    Description: S3 Website URL
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  WebsiteBucketName:
    Description: S3 Bucket Name
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  WebsiteDomainName:
    Description: Website domain name without protocol
    Value: !Sub '${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteDomain'

  TasksTableName:
    Description: DynamoDB Tasks Table Name
    Value: !Ref TasksTable
    Export:
      Name: !Sub '${AWS::StackName}-TasksTable'

  AnalyticsTableName:
    Description: DynamoDB Analytics Table Name
    Value: !Ref AnalyticsTable
    Export:
      Name: !Sub '${AWS::StackName}-AnalyticsTable'
